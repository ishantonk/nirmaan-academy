import React, { useState, useEffect, useRef } from 'react';
import { ChevronLeft, ChevronRight } from 'lucide-react';

const Carousel = ({ 
  children, 
  autoPlay = false, 
  autoPlayInterval = 3000,
  showDots = true,
  showArrows = true,
  infinite = true,
  itemsPerView = 1,
  responsive = {},
  gap = 16,
  className = ""
}) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [touchStart, setTouchStart] = useState(0);
  const [touchEnd, setTouchEnd] = useState(0);
  const [currentItemsPerView, setCurrentItemsPerView] = useState(itemsPerView);
  const intervalRef = useRef(null);
  const carouselRef = useRef(null);

  const slides = React.Children.toArray(children);
  const totalSlides = slides.length;

  // Handle responsive breakpoints
  useEffect(() => {
    const handleResize = () => {
      const width = window.innerWidth;
      let newItemsPerView = itemsPerView;

      // Check responsive breakpoints (sorted by width descending)
      const sortedBreakpoints = Object.entries(responsive)
        .map(([bp, items]) => [parseInt(bp), items])
        .sort((a, b) => b[0] - a[0]);

      for (const [breakpoint, items] of sortedBreakpoints) {
        if (width >= breakpoint) {
          newItemsPerView = items;
          break;
        }
      }

      setCurrentItemsPerView(newItemsPerView);
    };

    handleResize();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [itemsPerView, responsive]);

  // Calculate maximum index based on items per view
  const maxIndex = Math.max(0, totalSlides - currentItemsPerView);

  // Auto play functionality
  useEffect(() => {
    if (autoPlay && totalSlides > currentItemsPerView) {
      intervalRef.current = setInterval(() => {
        nextSlide();
      }, autoPlayInterval);
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [autoPlay, autoPlayInterval, currentIndex, currentItemsPerView]);

  // Reset currentIndex if it exceeds maxIndex when itemsPerView changes
  useEffect(() => {
    if (currentIndex > maxIndex) {
      setCurrentIndex(maxIndex);
    }
  }, [currentItemsPerView, maxIndex]);

  // Clear interval on user interaction
  const clearAutoPlay = () => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
    }
  };

  const goToSlide = (index) => {
    if (isTransitioning) return;
    clearAutoPlay();
    setCurrentIndex(Math.min(index, maxIndex));
  };

  const nextSlide = () => {
    if (isTransitioning) return;
    setIsTransitioning(true);
    clearAutoPlay();
    
    setTimeout(() => {
      setCurrentIndex((prevIndex) => {
        if (infinite) {
          return prevIndex >= maxIndex ? 0 : prevIndex + 1;
        }
        return prevIndex < maxIndex ? prevIndex + 1 : prevIndex;
      });
      setIsTransitioning(false);
    }, 50);
  };

  const prevSlide = () => {
    if (isTransitioning) return;
    setIsTransitioning(true);
    clearAutoPlay();
    
    setTimeout(() => {
      setCurrentIndex((prevIndex) => {
        if (infinite) {
          return prevIndex <= 0 ? maxIndex : prevIndex - 1;
        }
        return prevIndex > 0 ? prevIndex - 1 : prevIndex;
      });
      setIsTransitioning(false);
    }, 50);
  };

  // Touch handlers
  const handleTouchStart = (e) => {
    setTouchEnd(0);
    setTouchStart(e.targetTouches[0].clientX);
  };

  const handleTouchMove = (e) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };

  const handleTouchEnd = () => {
    if (!touchStart || !touchEnd) return;
    
    const distance = touchStart - touchEnd;
    const isLeftSwipe = distance > 50;
    const isRightSwipe = distance < -50;

    if (isLeftSwipe) {
      nextSlide();
    } else if (isRightSwipe) {
      prevSlide();
    }
  };

  // Keyboard navigation
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === 'ArrowLeft') {
        prevSlide();
      } else if (e.key === 'ArrowRight') {
        nextSlide();
      }
    };

    const carousel = carouselRef.current;
    if (carousel) {
      carousel.addEventListener('keydown', handleKeyDown);
      return () => carousel.removeEventListener('keydown', handleKeyDown);
    }
  }, []);

  if (totalSlides === 0) {
    return <div className="text-center text-gray-500 p-8">No slides to display</div>;
  }

  // Calculate slide width and transform
  const slideWidth = 100 / currentItemsPerView;
  const transform = `translateX(-${currentIndex * slideWidth}%)`;

  // Calculate total pages for dots
  const totalPages = Math.ceil(totalSlides / currentItemsPerView);
  const currentPage = Math.floor(currentIndex / currentItemsPerView);

  return (
    <div 
      ref={carouselRef}
      className={`relative w-full max-w-6xl mx-auto bg-gray-100 rounded-lg overflow-hidden shadow-lg ${className}`}
      tabIndex={0}
      role="region"
      aria-label="Image carousel"
      onMouseEnter={clearAutoPlay}
    >
      {/* Main carousel container */}
      <div
        className="flex transition-transform duration-500 ease-in-out"
        style={{
          transform,
          gap: `${gap}px`,
        }}
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        {slides.map((slide, index) => (
          <div
            key={index}
            className="flex-shrink-0"
            style={{
              width: `calc(${slideWidth}% - ${gap * (currentItemsPerView - 1) / currentItemsPerView}px)`,
            }}
            aria-hidden={index < currentIndex || index >= currentIndex + currentItemsPerView}
          >
            {slide}
          </div>
        ))}
      </div>

      {/* Navigation arrows */}
      {showArrows && totalSlides > currentItemsPerView && (
        <>
          <button
            onClick={prevSlide}
            disabled={!infinite && currentIndex === 0}
            className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white text-gray-800 p-2 rounded-full shadow-lg transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed z-10 hover:scale-110"
            aria-label="Previous slide"
          >
            <ChevronLeft size={24} />
          </button>
          
          <button
            onClick={nextSlide}
            disabled={!infinite && currentIndex >= maxIndex}
            className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white text-gray-800 p-2 rounded-full shadow-lg transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed z-10 hover:scale-110"
            aria-label="Next slide"
          >
            <ChevronRight size={24} />
          </button>
        </>
      )}

      {/* Dots indicator - now represents pages, not individual slides */}
      {showDots && totalPages > 1 && (
        <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2 z-10">
          {Array.from({ length: totalPages }).map((_, pageIndex) => (
            <button
              key={pageIndex}
              onClick={() => goToSlide(pageIndex * currentItemsPerView)}
              className={`w-3 h-3 rounded-full transition-all duration-200 ${
                pageIndex === currentPage
                  ? 'bg-white scale-125 shadow-lg'
                  : 'bg-white/60 hover:bg-white/80'
              }`}
              aria-label={`Go to page ${pageIndex + 1}`}
            />
          ))}
        </div>
      )}

      {/* Slide counter */}
      <div className="absolute top-4 right-4 bg-black/50 text-white px-3 py-1 rounded-full text-sm font-medium z-10">
        {Math.min(currentIndex + currentItemsPerView, totalSlides)} / {totalSlides} items
      </div>

      {/* Items per view indicator */}
      <div className="absolute top-4 left-4 bg-black/50 text-white px-3 py-1 rounded-full text-sm font-medium z-10">
        {currentItemsPerView} per view
      </div>
    </div>
  );
};

// Example usage component
const CarouselDemo = () => {
  const sampleItems = [
    { id: 1, title: "Product 1", price: "$29.99", color: "bg-red-400" },
    { id: 2, title: "Product 2", price: "$39.99", color: "bg-blue-400" },
    { id: 3, title: "Product 3", price: "$19.99", color: "bg-green-400" },
    { id: 4, title: "Product 4", price: "$49.99", color: "bg-yellow-400" },
    { id: 5, title: "Product 5", price: "$59.99", color: "bg-purple-400" },
    { id: 6, title: "Product 6", price: "$24.99", color: "bg-pink-400" },
    { id: 7, title: "Product 7", price: "$34.99", color: "bg-indigo-400" },
    { id: 8, title: "Product 8", price: "$44.99", color: "bg-orange-400" },
    { id: 9, title: "Product 9", price: "$54.99", color: "bg-teal-400" },
    { id: 10, title: "Product 10", price: "$64.99", color: "bg-cyan-400" },
  ];

  const testimonials = [
    { id: 1, name: "Alice Johnson", role: "Designer", quote: "Amazing experience!", avatar: "bg-purple-400" },
    { id: 2, name: "Bob Smith", role: "Developer", quote: "Highly recommended!", avatar: "bg-blue-400" },
    { id: 3, name: "Carol White", role: "Manager", quote: "Outstanding service!", avatar: "bg-green-400" },
    { id: 4, name: "David Brown", role: "Consultant", quote: "Exceeded expectations!", avatar: "bg-orange-400" },
    { id: 5, name: "Emma Davis", role: "Analyst", quote: "Perfect solution!", avatar: "bg-pink-400" },
    { id: 6, name: "Frank Wilson", role: "Engineer", quote: "Top quality work!", avatar: "bg-red-400" },
  ];

  return (
    <div className="p-8 bg-gray-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-4xl font-bold text-gray-800 mb-8 text-center">
          Multi-Item Carousel Component
        </h1>
        
        {/* Responsive Product Carousel */}
        <div className="mb-12">
          <h2 className="text-2xl font-semibold mb-6 text-gray-700">
            Product Showcase (Responsive)
          </h2>
          <Carousel 
            autoPlay={true} 
            autoPlayInterval={3000}
            showDots={true}
            showArrows={true}
            infinite={true}
            itemsPerView={1}
            responsive={{
              640: 2,   // 2 items on screens >= 640px
              768: 3,   // 3 items on screens >= 768px
              1024: 4,  // 4 items on screens >= 1024px
              1280: 5   // 5 items on screens >= 1280px
            }}
            gap={20}
          >
            {sampleItems.map((item) => (
              <div 
                key={item.id} 
                className={`${item.color} h-64 rounded-lg flex flex-col items-center justify-center text-white shadow-lg transform hover:scale-105 transition-transform duration-200`}
              >
                <div className="text-center p-4">
                  <h3 className="text-xl font-bold mb-2">{item.title}</h3>
                  <p className="text-2xl font-semibold">{item.price}</p>
                  <button className="mt-4 bg-white text-gray-800 px-4 py-2 rounded-full font-medium hover:bg-gray-100 transition-colors">
                    Add to Cart
                  </button>
                </div>
              </div>
            ))}
          </Carousel>
        </div>

        {/* Testimonials Carousel */}
        <div className="mb-12">
          <h2 className="text-2xl font-semibold mb-6 text-gray-700">
            Customer Testimonials (2 items per view)
          </h2>
          <Carousel 
            autoPlay={false}
            showDots={true}
            showArrows={true}
            infinite={true}
            itemsPerView={2}
            responsive={{
              320: 1,   // 1 item on small screens
              768: 2,   // 2 items on larger screens
            }}
            gap={24}
            className="bg-white"
          >
            {testimonials.map((testimonial) => (
              <div 
                key={testimonial.id} 
                className="bg-gray-50 h-48 rounded-lg p-6 flex flex-col justify-between shadow-sm border"
              >
                <blockquote className="text-gray-700 italic text-lg mb-4">
                  "{testimonial.quote}"
                </blockquote>
                <div className="flex items-center">
                  <div className={`${testimonial.avatar} w-12 h-12 rounded-full flex items-center justify-center text-white font-bold mr-4`}>
                    {testimonial.name[0]}
                  </div>
                  <div>
                    <div className="font-semibold text-gray-800">{testimonial.name}</div>
                    <div className="text-gray-600 text-sm">{testimonial.role}</div>
                  </div>
                </div>
              </div>
            ))}
          </Carousel>
        </div>

        {/* Single Item Large Carousel */}
        <div className="mb-12">
          <h2 className="text-2xl font-semibold mb-6 text-gray-700">
            Featured Content (Single item)
          </h2>
          <Carousel 
            autoPlay={true}
            autoPlayInterval={5000}
            showDots={true}
            showArrows={true}
            infinite={true}
            itemsPerView={1}
            gap={0}
          >
            {sampleItems.slice(0, 4).map((item) => (
              <div 
                key={item.id} 
                className={`${item.color} h-96 flex items-center justify-center text-white`}
              >
                <div className="text-center">
                  <h3 className="text-4xl font-bold mb-4">{item.title}</h3>
                  <p className="text-3xl font-semibold mb-6">{item.price}</p>
                  <button className="bg-white text-gray-800 px-8 py-3 rounded-full font-bold hover:bg-gray-100 transition-colors text-lg">
                    Learn More
                  </button>
                </div>
              </div>
            ))}
          </Carousel>
        </div>

        {/* Three Column Layout */}
        <div className="mb-12">
          <h2 className="text-2xl font-semibold mb-6 text-gray-700">
            Fixed 3 Items Per View
          </h2>
          <Carousel 
            autoPlay={false}
            showDots={true}
            showArrows={true}
            infinite={false}
            itemsPerView={3}
            responsive={{
              320: 1,   // 1 item on mobile
              640: 2,   // 2 items on small tablets
              768: 3,   // 3 items on desktop
            }}
            gap={16}
          >
            {sampleItems.map((item) => (
              <div 
                key={item.id} 
                className={`${item.color} h-40 rounded-lg flex items-center justify-center text-white font-bold text-lg`}
              >
                {item.title}
              </div>
            ))}
          </Carousel>
        </div>

        <div className="mt-16 p-6 bg-white rounded-lg shadow-sm">
          <h3 className="text-xl font-semibold mb-4 text-gray-800">New Features:</h3>
          <div className="grid md:grid-cols-2 gap-6 text-gray-600">
            <div>
              <h4 className="font-semibold mb-2 text-gray-800">Items Per View:</h4>
              <ul className="space-y-1">
                <li>• Set fixed number of visible items</li>
                <li>• Responsive breakpoints support</li>
                <li>• Automatic layout adjustment</li>
                <li>• Customizable gap between items</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold mb-2 text-gray-800">Enhanced Navigation:</h4>
              <ul className="space-y-1">
                <li>• Smart pagination for multi-item views</li>
                <li>• Page-based dot navigation</li>
                <li>• Updated slide counter</li>
                <li>• Real-time items per view indicator</li>
              </ul>
            </div>
          </div>
          
          <div className="mt-6 p-4 bg-blue-50 rounded-lg">
            <h4 className="font-semibold mb-2 text-blue-800">Responsive Configuration Example:</h4>
            <code className="text-sm text-blue-700 block">
              {`responsive={{
  640: 2,   // 2 items on screens >= 640px
  768: 3,   // 3 items on screens >= 768px
  1024: 4,  // 4 items on screens >= 1024px
  1280: 5   // 5 items on screens >= 1280px
}}`}
            </code>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CarouselDemo;